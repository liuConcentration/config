文件描述符---unsigned int，当打或创建一个文件的时候，内核向进程返回一个文件描述符，用于标示这个文件。
UNIX 系统SHELL 使用 0作为标准输入得描述符，1为标准输出的描述符，2为标准错误的描述符。
遵从 POSIX协议的 标示符 使用 STDIN_FILENO、STDOUT_FILENO、STDERR_FILENO 来表示这三个数字。<unistd.h>

文件描述符的范围： 0 - OPEN_MAX
在 FreeBSD5.2.1、MAX OS X 10.3、Solaris 9中，文件描述符的范围实际上是无上限的，只是受到系统配置的存储器总量、整型字长、系统管理员所配置的软限制和硬限制的约束。
Linux2.4.22 对于每个进程的文件描述符的硬限制是 1048576

#include <fcntl.h>
int open(const char*pathname, int oflag, .../*mode_t mode*/)	创建一个文件，返回文件描述符
	oflag用来设置文件操作的选项，可以同时配置多个，多个配置实用或运算

	O_RDONLY 只读打开 0
	O_WRONLY 只写打开 1
	O_RDWR 读写打开 2
	O_APPEND 追加内动到文件末尾
	O_CREAT 文件不存在则创建，该选项需要第三个参数mode 来指定文件的权限
	O_EXCL 如果指定了 O_CREAT，文件已存在则报错，可用于判断文件是否存在
	O_TRUNC 如果文件存在，并且为只写或只读成功打开，则将其长度截短成 0（相当于总是打开一个空文件）
	O_NOCTTY 如果pathname是终端设备，则不将该设备分配作为此进程的控制终端
	O_NONBLOCK 如果path指的是一个 FIFO、一个块特殊文件或一个字符特殊文件，则此选项为文件的本次打开操作和后续的I/O操作设置非阻塞模式
	O_DSYNC 每次write等待I/O操作完成，如果写操作不影响读取刚写入的数据，则不等待文件属性被更新
	O_RSYNC 每一个以文件描述符作为参数的read操作等待，知道任何对文件同一部分进行的未决写操作都完成
	O_SYNC 使每次write都等到物理I/O操作完成，包括write操作引起的属性更新所需的I/O

	在POSIX 标准中 _POSIX_NO_TRUNC 决定 当文件名 超过 NAME_MAX 时候，是自动截断还是，返回错误并设置errno为ENAMETOLONG



#include <fcntl.h>
int create(const char *pathname, mode_t mode); 创建一个文件 返回文件描述符 WriteOnly 出错 返回 -1
	该函数相当于 open(pathname, O_WRONLY | O_CREAT | O_TRUNC, mode)



#include <unistd.h>
int close(int flags);	关闭一个文件描述符 成功返回0 否则为 -1
	当程序终止时，系统会自动关闭所有打开的文件描述符



当前文件偏移量：每个文件打开都会有一个当前文件偏移量，通常为非负整数，用于度量从文件开始处计算的字节数。通常都写都是从文件偏移量处开始，并增加偏移量文件都写的字节数，文件打开时，如果没有指定O_APPEND,偏移量一般为0;偏移量还可以通过 lseek函数 去显示的控制。

#include <unistd.h>
off_t lseek(int filedes, off_t offset, int whence);	如果成功返回新的偏移量， 否则 返回 -1
	whence参数：
	SEEK_SET 0 文件偏移量设置为距离开始处offset个字节
	SEEK_CUR 1 文件偏移量设置为当前值加offset，offset可正可负
	SEEK_END 2 文件偏移量设置为文件长度加offset，offset可正可负


#include <unistd.h>
ssize_t read(int flags, void *buf, size_t nbytes);	从flags中读取 size_t字节的数据 如果已到达文件结尾则返回0 出错返回-1


#include <unistd.h>
int write(int flags, const void *buf, size_t nbytes);	将buf 写入到 flags中 成功返回 已写入的字节数 出错 返回-1
	默认文件偏移量从 当前偏移位置开始写，如果 open的时候 指定了 O_APPEND 则从文件结尾开始写，如果 nbytes 大于实际字节数 则会导致 内存溢出



文件共享
	内核使用三种数据结构打开文件，他们之间的关系决定了文件在共享方面一个进程对另一个进程可能产生的影响。
	1).每个进程表中都有一个记录项，记录想中包含有一张打开文件描述符表，可将其看成一个矢量，每个文件描述符占一项。文件描述符关联：
		a).文件描述符标志
		b).指向一个文件表项的指针
	2.kernel为所有的打开文件维持一张文件表，表中包含：
		a).文件状态标志（读、写、填写、同步、非阻塞等）
		b).当前文件偏移量
		c).指向该文件V节点表项的指针
	3.每个打开文件都有一个v节点(v-node)结构，v节点包含了文件类型和对比文件进行各种文件进行操作的函数指针。对于大多数文件，V节点包含了该文件的i节点（i-node，索引节点）。这些信息是在打开文件时从磁盘写入内存的，所以所有关于文件的信息都是快速可供使用的（文件所有者，文件长度，所在设备等）。

	
原子操作
	#include <unistd.h>	
	ssize_t pread(int flag, void *buf, size_t nbytes, off_t offset);
	ssize_t pread(int flag, const void *buf, size_t nbytes, off_t offset);
	open(path, O_APPEND);
	open(path, O_CREATE | O_EXCL)	
	以上四个为原子操作的处理
	原子操作就是指由多步组成的操作，如果该操作原子的执行，要么执行完所有操作，要么一步也不执行，不可能只执行其中一个子集。


dup和dup2函数
	用于复制一个文件描述符
	#include <unistd.h>
	int dup(int flag);
	int dup2(int flag, int flag2)
	dup返回的新的文件描述符一定是当前可用文件描述符的最小值。
	dup2可以用flag2指定心描述符的数字，如果描述符已经存在则 先进行 close，如果flag = flag2 则不close flag
	dup和dup2两个函数返回的文件描述符共用同一个文件表,所以他们的文件状态标志和偏移量是共享的
	如果被复制的文件描述符被close，新的 文件描述符也同样会被close掉

fsync、sync、fdatasync
	用于刷新缓冲区
	void sync(void) 将所有修改过的块缓冲区排入写队列，但是不等待实际写操作完成，系统通常每30秒调用一次sync函数
	int fsync(int flag) 将指定文件描述符的文件缓冲区内容写入文件，同时等写操作完成后返回	 0 正常 -1 出错
	int fdatasync(int flag) 跟fsync类似，不过fsync不更新文件的时间等属性
	
#include <unistd.h>
	
	int fcntl(int flag, int cmd, /* int arg */)
	cmd参数
		F_DUPFD 复制一个现有的文件描述符 返回可用文件描述符大于等于第三个参数的最小值,该描述符与原描述符共享一个文件表。与dup一样该操作会清楚FD_CLOEXEC标志
		F_GETFD 返回flag的文件描述符标志作为返回值
		F_SETFD 设置flag的文件描述符标志为第三个参数的值 当 该标志 设置为 0 时 exec不关闭 1时 exec会关闭
		F_GETFL	获取flag的文件描述符的状态标志
		F_SETFL 设置flag的文件描述符的状态标志
		





































