文件和目录
===============================================
stat、fstat、lstat函数
-----------------------------------------------
	#include <sys/stat.h>
	int stat(const char*restrict pathname, struct stat *restrict buf);
	int fstat(int flag, struct stat *buf);
	int lstat(const char *restrict pathname, struct stat *restrict buf);
- stat 返回pathname的相关信息的结构
- fstat 根据文件描述符返回文件的结构信息
- lstat  如果pathname所指向的文件是一个符号链接，那么返回符号链接的属性而不是所指文件属性

文件类型
-----------------------------------------------
***
1. 普通文件(regular file)
> 最常用的文件类型，这种文件包涵了某种形式的数据，至于文件内是文本还是二进制数据与内核无关，该程序由处理该文件的程序来解释执行。
2. 目录文件(directory file) 
> 目录文件包含了一组文件名，和指向这写文件信息的指针，如果一个目录具有读权限，进程都可以获取到其中的文件信息，但只有内核可以直接对目录执行写操作，用户进程只能通过函数去执行写操作。
3. 块特殊文件(block special file)
> 这种文件类型提供对设备带缓冲的访问，每次访问以固定长度为单位进行。
4. 字符特殊文件(character special file)
> 这种文件类型提供对设备不带缓冲的访问，每次访问长度可变。系统中的所有设备要么是特殊字符文件，要么是块特殊文件。
5. FIFO(first in first out)
> 这种类型文件用于进程间通讯，有时也将其为命名管道(named pipe)
6. 套接字(socket)
> 这种文件类型用于进程间的网络通信。套接字可以用于在一台宿主机上进程之间的非网络通信。
7. 符号链接(symbolic link)
> 这种文件指向另一个文件
***

**_文件类型信息_** 包含在stat结构的st_mode成员中,可以用一组宏定义来确定文件类型，这些宏的参数就是stat结构中st_mode成员,早期的系统不提供 `S_ISxxx` 宏，于是就需要 将st_mode 与 屏蔽字 `S_IFMT` 进行逻辑 与 运算，然后与名为 `S_IFxxx` 的常量进行比较，大多数系统在文件 `<sys/stat.h>` 中定义了该常量，查看这个文件可以看到 `S_ISDIR` 定义为

	#define S_ISDIR(mode) ((mode) & S_IFMT == S_IFDIR)


<table>
	<tr>
		<th>宏</th>
		<th>文件类型</th>
	</tr>
	<tr>
		<td>S_ISREG()</td>
		<td>普通文件</td>
	</tr>
	<tr>
		<td>S_ISDIR()</td>
		<td>目录文件</td>
	</tr>
	<tr>
		<td>S_ISCHR()</td>
		<td>字符特殊文件</td>
	</tr>
	<tr>
		<td>S_ISBLK()</td>
		<td>块特殊文件</td>
	</tr>
	<tr>
		<td>S_ISFIFO()</td>
		<td>管道或FIFO</td>
	</tr>
	<tr>
		<td>S_ISLNK()</td>
		<td>符号链接</td>
	</tr>
	<tr>
		<td>S_ISSOCK()</td>
		<td>套接字</td>
	</tr>
</table>

POSIX.1允许实现将进程间通讯(IPC)对象表示为文件，以下宏定义可以用来确定IPC对象的类型，**_他们的参数是指向stat的指针_**

<table>
	<tr>
		<th>宏</th>
		<th>对象类型</th>
	</tr>
	<tr>
		<td>S_TYPEISMQ()</td>
		<td>消息队列</td>
	</tr>
	<tr>
		<td>S_TYPEISSEM()</td>
		<td>信号量</td>
	</tr>
	<tr>
		<td>S_TYPEISSHM()</td>
		<td>共享存储对象</td>
	</tr>
</table>

***
**_例子_**

	#include <stdio.h>
	#include <stdlib.h>
	#include <sys/stat.h>

	int main(int argc, char** argv)
	{
		int i = 0;
		struct stat buf;
		char *ptr;

		if(argc < 2)
		{
		    printf("parameter count error!\n");
		    return -1;
		}
		for(i = 1; i < argc; i++)
		{
		    if(lstat(argv[i], &buf) < 0)
		    {
		        printf(" open %s failed!\n", argv[i]);
		        return -1;
		    }
		    if(S_ISREG(buf.st_mode))
		    {
		        ptr = "regular file";
		    }else if(S_ISDIR(buf.st_mode))
		    {
		        ptr = "directory file";
		    }else if(S_ISCHR(buf.st_mode))
		    {
		        ptr = "character special file";
		    }else if(S_ISBLK(buf.st_mode))
		    {
		        ptr = "block special file";
		    }else if(S_ISFIFO(buf.st_mode))
		    {
		        ptr = "FIFO file";
		    }else if(S_ISLNK(buf.st_mode))
		    {
		        ptr = "symbolic link";
		    }else if(S_ISSOCK(buf.st_mode))
		    {
		        ptr = "socket";
		    }else if(S_TYPEISMQ(&buf))
		    {
		        ptr = "MQ file";
		    }else if(S_TYPEISSEM(&buf))
		    {
		        ptr = "SEM file";
		    }else if(S_TYPEISSHM(&buf))
		    {
		        ptr = "SHM file";
		    }else
		    {
		        ptr = " unknow mode";
		    }
		    printf("'%s' is a %s\n", argv[i], ptr);
		 }
		return 1;
	}
***

设置用户ID和设置组ID
--------------------------------------------

- **实际用户ID** 和 **实际组ID** 标示我们究竟是谁，这两个字段在登陆时取自口令文件中的登录项，通常，在一个登陆会话间这个值不会改变，但是超级用户进程有方法可以改变它。
- **有效用户ID**、 **有效组ID** 和 **附加组ID** 决定了我们的文件访问权限
- **保存的设置用户ID** 和 **保存的设置组ID** 在执行一个程序时包含了有效用户ID和有效组ID的副本


> 通常有效用户ID 等于 实际用户ID， 有效组ID 等于 实际组ID。

> 每个文件都有一个所有者和组所有者，所有者有 `stat` 结构中的 `st_uid` 成员表示，组所有者则由 `st_gid`表示

> 当执行一个文件时，进程的有效用户ID通常就是实际用户ID，有效组ID通常就是实际组ID，但是可以在文件模式字（st_mode） 中设置一个特殊标志，其含义是，当执行此文件时，将进程的有效用户ID设置为文件所属者的用户ID（st_uid），同样在文件模式字中也可以设置另外一个特殊标志，使执行此文件时，将进程的有效用户组ID设置为文件组所有者ID（st_uid），在文件模式中的这两位被成为 `设置用户ID（set-user-ID）位` 和 `设置组ID（set-group-ID）位`。

>设置用户ID位 和 设置组ID位 都包含在 `st_mode` 值中，可以通过常量 `S_ISUID` 和 `S_ISGID` 测试。



文件访问权限
---------------------------------------------

`st_mode` 值包含了针对文件的访问权限位(所有类型的文件都具有访问权限), 每个文件有9个访问权限位, 其中分为三个部分。使用命令 `chmod(1)` 可以修改这9个文件权限位,该命令允许我们用`u`表示文件所有者，`g` 表示组，`o` 表示其他。


**9个访问权位，取自&lt;sys/stat.h&gt;**
<table>
	<tr>
		<th>st_mode屏蔽</th>
		<th>意义</th>
	</tr>
	<tr>
		<td>S_IRUSE</td>
		<td>用户-读</td>
	</tr>
	<tr>
		<td>S_IWUSE</td>
		<td>用户-写</td>
	</tr>
	<tr>
		<td>S_IXUSE</td>
		<td>用户-执行</td>
	</tr>
	<tr>
		<td>S_IRGRP</td>
		<td>组-读</td>
	</tr>
	<tr>
		<td>S_IWGRP</td>
		<td>组-写</td>
	</tr>
	<tr>
		<td>S_IXGRP</td>
		<td>组-执行</td>
	</tr>
	<tr>
		<td>S_IROTH</td>
		<td>其他-读</td>
	</tr>
	<tr>
		<td>S_IWOTH</td>
		<td>其他-写</td>
	</tr>
	<tr>
		<td>S_IXOTH</td>
		<td>其他-执行</td>
	</tr>
</table>

- 当用名字打开任意类型的文件时，对该名字中的每一个目录都必须有执行权限，所有目录的执行权限位也被称为搜索位
- 对于一个文件的读权限决定了我们能否打开该文件进行读操作，这与`open`函数的`O_RDONLY`和`O_RDWR`标志相关
- 对于一个文件的读权限决定了我们能否打开该文件进行读操作，这与`open`函数的`O_WRONLY`和`O_RDWR`标志相关
- 如果 `open` 指定了 `O_TRUNC` 标志，那么必须对该文件具有写权限
- 为了在一个目录中创建一个新文件，必须对包含该文件的目录具有写权限和执行权限
- 为了删除一个现有的文件，必须对包含该文件的目录具有写权限和执行权限，对文件本身则不需要有读写权限
- 如果用6个 `exec` 函数中的任何一个执行某个文件，都必须对该文件具有执行权限，而且该文件必须是一个普通文件

>进程每次打开创建或者删除一个文件的时候，都会对文件进行访问权限测试，而这种测试可能涉及文件的所有者（`st_uid`, `st_gid`）、进程的有效ID（有效用户ID和组ID），以及进程的附加组ID,进程会进行以下测试：

> 1. 如果进程的有效ID是0（0为ROOT用户），则允许访问，这给予了超级用户对整个文件操作系统进行处理的最充分的自由
> 2. 如果进程的有效用户ID与文件所有者ID相等，那么如果所有者适当的权限位被设置，则允许访问，否则拒绝访问，适当的访问权限位指的是，若进程为读而打开文件，读位应为1，为写打开，写位为1，为执行打开，执行位为1
> 3. 如果进程的有效组ID或者进程的附加组ID之一等于文件的组ID，那么如果组适当的访问权限被设置则允许访问
> 4. 如果其他用户的访问权限位被设置，则允许访问，否则拒绝访问

**注意：如果进程拥有该文件，则按用户权限批准或拒绝该进程对文件的访问，不查看组访问权限，如果进程拥有于这个文件，进程数据适当的组，则不进行其他访问权限的测试**



新文件和目录的所有权
---------------------------------------------
使用 `create` 或者 `open` 创建的文件，用户ID会被设置成进程的有效用户ID，组ID POSIX.1 中定义了两中选择：

1. 组ID可以是进程的有效组ID
2. 组ID可以是文件所在目录的组ID

> FreeBSD5.2.1 和 Mac OS X 10.3 总是使用目录的组ID作为新文件的组ID

> Linux `ext2` 和 `ext3` 文件系统允许基于文件系统在POSIX.1 所允许的两种选项中选择其中一种，为此在`mount(1)` 命令中使用了一个特殊标志。对于Linux2.4.22和Solaris 9中，新的组ID取决与他所在目录组权限位是否设置，如果未设置则使用进程的有效组ID。

access
---------------------------------------------
当用户使用设置用户id和组id运行的时候，可能会需要对用户的实际ID和实际组ID进行权限验证，使用 `access` 函数可以验证进程的实际用户ID和组ID是否有权限

	#include <unistd.h>
	int access(const char *pathname, int mode) 

**mode 范围**
<table>
	<tr>
		<th>mode</th>
		<th>意义</th>
	</tr>
	<tr>
		<td>R_OK</td>
		<td>测试读权限</td>
	</tr>
	<tr>
		<td>W_OK</td>
		<td>测试写权限</td>
	</tr>
	<tr>
		<td>X_OK</td>
		<td>测试执行权限</td>
	</tr>
	<tr>
		<td>F_OK</td>
		<td>测试文件是否存在</td>
	</tr>
</table>




















